from math import sin, cos
import matplotlib.pyplot as plt
import numpy as np
import time

omega=1
R1=0.75
R2=0.25
S=1.5
T=S*2
G=6.674e-11
M=1.9884e+30
GM2=(R1**3)*(omega**2)
interval=0.025
GM1=(R2**3)*(omega**2)
N=160

initial_x=-0
initial_x_velocity=0

initial_y=0
initial_y_velocity=4



def runkut(n, x, y, h):
    "Advances the solution of diff eqn defined by derivs from x to x+h"
    #print("h" + str(h))
    y0=y[:]
    k1=derivs(n,x,y)

    for i in range(1,n+1):

        y[i]=y0[i]+0.5*h * k1[i]
    k2=derivs(n, x +0.5*h, y)

    for i in range(1,n+1):
        y[i]=y0[i]+h*(0.2071067811* k1[i ]+0.2928932188*k2[i])
    k3=derivs(n, x +0.5*h, y)
    for i in range(1,n+1):
        y[i]=y0[i] - h*(0.7071067811* k2[i] - 1.7071067811*k3[i])
    k4=derivs(n, x+h, y)
    for i in range(1,n+1):
        a=k1[i ]+0.5857864376*k2[i ]+3.4142135623*k3[i]+k4[i]
        y[i]=y0[i ]+0.16666666667*h * a 

    x+=h
    return (x,y)
# #################
#dy[2] = acceleration
#dy[1] = velocity
def derivs(n, x, y):
    "The function DERIVS calculates yâ€™ from x and y"
    X1=R1*np.cos(omega*x)
    #print("X1 " + str(X1))
    X2=-R2*np.cos(omega*x)
    Y1=R1*np.sin(omega*x)
    #print("Y1 " + str(Y1))
    Y2=-R2*np.sin(omega*x)
    #print("X2 " +str(X2))
    #print("Y2 " +str(Y2))    
    r1=((y[1]-X1)**2+(y[3]-Y1)**2)**0.5
    r2=((y[1]-X2)**2+(y[3]-Y2)**2)**0.5
    #print("r1 " +str(r1))
    #print("r2 " +str(r2))
    x_acc=-(((1/r1**2)*((y[1]-X1)/r1))+3*((1/r2**2)*((y[1]-X2)/r2)))
    y_acc=-(((1/r1**2)*((y[3]-Y1)/r1))+3*((1/r2**2)*((y[3]-Y2)/r2)))
    #print("x_acc " +str(x_acc))
    #print("y_acc " +str(y_acc))    
    dy =[0 for i in range(0,n+1)]
    dy[1]=y[2]
    dy[2]=x_acc
    dy[3]=y[4]
    dy[4]=y_acc
    return dy 
# #################










x=0.0; y=[0,initial_x, initial_x_velocity,initial_y,initial_y_velocity]  #[empty,x-position,x-vel,y-position,y-vel]
 # Set Boundary Conditions   initial accelerration , initial velocity 
# Calculate and print the solution for x= 0 to 1 using N steps

x_pos=[]
y_pos=[]
x_pos1=[]
y_pos1=[]

"""
t=np.arange(0,20,0.1)

X1=R*np.cos(omega*t)
Y1=R*np.sin(omega*t)
fig, ax = plt.subplots()
ax.scatter(X1,Y1)
plt.show()
"""


fig1, ax1 = plt.subplots()
def animate(x,y,time1):
    x_pos.append(y[1])
    y_pos.append(y[3])
    X1=R1*np.cos(omega*x)
    Y1=R1*np.sin(omega*x)
    X2=-R2*np.cos(omega*x)
    Y2=-R2*np.sin(omega*x)
    ax1.clear()
    ax1.scatter(X1,Y1,s=15,c="blue")
    ax1.scatter(X2,Y2,s=45,c="blue")
    plt.ylim(-T*R1,T*R1)
    plt.xlim(-T*R1,T*R1)
    plt.title('Time:' + str(time1))
    ax1.scatter(x_pos,y_pos,s=1,c="red")
    plt.pause(0.03)
time1=0
for j in range(0,N):
    #print(x)
    #print(y)
    x,y = runkut(4, x, y, (interval))
    x_pos1.append(y[1])
    y_pos1.append(y[3])
    animate(x,y,time1)
    time1=(time1+interval)
    time1=round(time1, 4);

period=[]


def calculate_acceleration(t,x,y,omega,R1,R2,GM1,GM2):
    X1=R1*np.cos(omega*t)
    #print("X1 " + str(X1))
    X2=-R2*np.cos(omega*t)
    Y1=R1*np.sin(omega*t)
    #print("Y1 " + str(Y1))
    Y2=-R2*np.sin(omega*t)
    #print("X2 " +str(X2))
    #print("Y2 " +str(Y2))    
    r1=((x-X1)**2+(y-Y1)**2)**0.5
    r2=((x-X2)**2+(y-Y2)**2)**0.5
    #print("r1 " +str(r1))
    #print("r2 " +str(r2))
    x_acc=-(GM1*((1/r1**2)*((x-X1)/r1))+GM2*((1/r2**2)*((x-X2)/r2)))
    y_acc=-(GM1*((1/r1**2)*((y-Y1)/r1))+GM2*((1/r2**2)*((y-Y2)/r2)))
    return x_acc,y_acc

t=0
acceleration_x=[]
acceleration_y=[]
for i in x_pos1:
    for j in y_pos1:
        x_acc1,y_acc1=calculate_acceleration(t,i,j,omega,R1,R2,GM1,GM2)
        acceleration_x.append(x_acc1)
        acceleration_y.append(y_acc1)
        t=t+interval
acceleration_x=np.asarray(acceleration_x)
acceleration_y=np.asarray(acceleration_y)
general_acceleration=(acceleration_x**2+acceleration_y**2)**0.5          
mean=np.mean(general_acceleration)
max_val=np.max(general_acceleration)
min_val=np.min(general_acceleration)  

x_pos1=np.asarray(x_pos1)
y_pos1=np.asarray(y_pos1)
time1=np.arange(0,N*interval,interval)
axis1=x_pos1*np.cos(omega*time1)+y_pos1*np.sin(omega*time1)
axis2=-x_pos1*np.sin(omega*time1)+y_pos1*np.cos(omega*time1)


fig1, ax1 = plt.subplots()

ax1.scatter(axis1,axis2,s=3,c="red")
plt.show()





"""          
for k in range(len(x_pos1)):            
    if x_pos1[k]==initial_x and y_pos1[k]==initial_y:
        period.append((j))
"""









        
print(period)

print("mean field " + str(mean))
print("max field " + str(max_val))
print("min field " + str(min_val))
x_pos1=np.asarray(x_pos1)
y_pos1=np.asarray(y_pos1)
distance=(y_pos1**2+x_pos1**2)**0.5
print("mean radius " +str(np.mean(distance)))
print("max radius " +str(np.max(distance)))
print("min radius " +str(np.min(distance)))




